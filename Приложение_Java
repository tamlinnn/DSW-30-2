class Purchase {
    private final int quantity;
    private final double price;

    public Purchase(int quantity, double price) {
        this.quantity = quantity;
        this.price = price;
    }


}


class Product {
    private final String name;
    private final long id;

    public Product(String name, long id) {
        this.name = name;
        this.id = id;
    }


}


class ProducerConfig {

}


class Topic {

}


class Producer {
    private final ProducerConfig config;

    public Producer(ProducerConfig config) {
        this.config = config;
    }

    public void send(Topic topic, Purchase purchase, Product product) {

    }
}


class Consumer {
    private final Schema schema;

    public Consumer(Schema schema) {
        this.schema = schema;
    }

    public void readAvroFile(String filePath) throws IOException {
        try (DataFileReader<GenericRecord> reader = new DataFileReader<>(new File(filePath), new GenericDatumReader<>())) {
            while (reader.hasNext()) {
                GenericRecord record = reader.next();
                Purchase purchase = convertToPurchase(record);
                Product product = convertToProduct(record);
                if (checkCondition(purchase)) {
                    sendMessageToKafka(purchase, product);
                }
            }
        }
    }

    private boolean checkCondition(Purchase purchase) {
        return purchase.getQuantity()  *  purchase.getPrice() > 3000;
    }

    private Purchase convertToPurchase(GenericRecord record) {

    }

    private Product convertToProduct(GenericRecord record) {

    }

    private void sendMessageToKafka(Purchase purchase, Product product) {

    }
}


public class Main {
    public static void main(String[] args) {
        String avroFilePath = "path/to/your/avro/file";
        Schema schema = null;
        Consumer consumer = new Consumer(schema);
        consumer.readAvroFile(avroFilePath);
    }
}
